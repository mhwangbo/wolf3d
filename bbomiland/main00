/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mhwangbo <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/05/25 14:54:29 by mhwangbo          #+#    #+#             */
/*   Updated: 2018/05/29 23:17:18 by mhwangbo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "wolf3d.h"

void	wolf_ray_cast(t_env *e)
{
	int		x;
	int		y_min;
	int		y_max;
	//horizontal
	// find coordinate of intersection
	// find y_a (downward ? -64 : 64)
	// find x_a = 64/tan(alpha)
	// wall ? stop && calculate distance : x_new = x_old + x_a && y_new = y_old + y_a
	x = -1;
	printf("pos_y: %f\n", POS.pos_y);
	ft_bzero(e->data, e->win_x * e->win_y * 4);
	while (++x < e->win_x)
	{
		POS.inters_y = (POS.pos_y / 64) * 64 + (POS.dir_y < 0 ? 64 : -1);
		POS.inters_x = POS.pos_x + (POS.pos_y - POS.inters_y) / tan(180 - x * (120 / e->win_x));
		POS.y_a = (POS.dir_y < 0 ? 64 : -64);
		POS.x_a = 64 / tan(180 - x * (120 / e->win_x));
		POS.hit_h = 0;
		while (POS.hit_h == 0 && (POS.inters_y / 64 < e->y_max && POS.inters_x / 64 < e->x_max))
		{
			if (e->map[(int)POS.inters_y / 64][(int)POS.inters_x / 64].wall_type > 0)
			{
				POS.pd_h = fabs((POS.pos_y - POS.inters_y) / sin(180 - x * (120 / e->win_x)));
				POS.hit_h = 1;
			}
			POS.o_inters_x = POS.inters_x;
			POS.o_inters_y = POS.inters_y;
			POS.inters_x = POS.o_inters_x + POS.x_a;
			POS.inters_y = POS.o_inters_y + POS.y_a;
		}
		POS.inters_x = (POS.pos_x / 64) * 64 + (POS.dir_x < 0 ? 64 : -1);
		POS.inters_y = POS.pos_y + (POS.pos_x - POS.inters_x) / tan(180 - x * (120 / e->win_x));
		POS.x_a = (POS.dir_y < 0 ? 64 : -64);
		POS.y_a = 64 / tan(180 - x * (120 / e->win_x));
		POS.hit_v = 0;
		while (POS.hit_v == 0 && (POS.inters_y / 64 < e->y_max && POS.inters_x / 64 < e->x_max))
		{
			if (e->map[(int)POS.inters_y / 64][(int)POS.inters_x / 64].wall_type > 0)
			{
				POS.pd_v = fabs((POS.pos_y - POS.inters_y) / sin(180 - x * (120 / e->win_x)));
				POS.hit_v = 1;
			}
			POS.o_inters_x = POS.inters_x;
			POS.o_inters_y = POS.inters_y;
			POS.inters_x = POS.o_inters_x + POS.x_a;
			POS.inters_y = POS.o_inters_y + POS.y_a;
		}
		if (POS.hit_h == 1 || POS.hit_v == 1)
		{
			POS.w_height = (64 / (POS.pd_h < POS.pd_v ? POS.pd_h : POS.pd_v)) * 277;
			y_min = (e->win_y / 2) - (POS.w_height / 2);
			y_max = (e->win_y / 2) + (POS.w_height / 2);
			while (y_min < y_max)
			{
				e->data[(int)((y_min * e->win_x) + x)] = (POS.pd_h < POS.pd_v ? 0xFFFFFF : 0x800000);
				y_min++;
			}
		}
	}
	mlx_put_image_to_window(e->mlx_ptr, e->win_ptr, e->img_ptr, 0, 0);
	//vertical
	// find coordinate of intersection
	// find x_a (downward ? -64 : 64)
	// find y_a = 64 * tan(alpha)
	// wall ? stop && calculate distance : x_new = x_old + x_a && y_new = y_old + y_a
	
	//if vertical meets first => side = 1 : 0;
}

int		wolf_key(int key, t_env *e)
{
	if (key == 125 && POS.pos_y + 64 < e->y_max &&
			e->map[(int)(POS.pos_y + 64) / 64][(int)POS.pos_x / 64].wall_type == 0)
		POS.pos_y += 64;
	if (key == 126 && POS.pos_y - 64 >= 0 &&
			e->map[(int)(POS.pos_y - 64) / 64][(int)POS.pos_x / 64].wall_type == 0)
		POS.pos_y -= 64;
	wolf_ray_cast(e);
	return (0);
}

void	wolf_win(t_env *e)
{
	e->mlx_ptr = mlx_init();
	e->win_ptr = mlx_new_window(e->mlx_ptr, e->win_x, e->win_y, "wolf3d");
	e->img_ptr = mlx_new_image(e->mlx_ptr, e->win_x, e->win_y);
	e->data = (int*)mlx_get_data_addr(e->img_ptr, &e->bpp, &e->size_line,
			&e->endian);
	wolf_ray_cast(e);
	mlx_put_image_to_window(e->mlx_ptr, e->win_ptr, e->img_ptr, 0, 0);
	mlx_hook(e->win_ptr, 2, 2, wolf_key, e);
	mlx_loop(e->mlx_ptr);
}

void 	wolf_find_max(char *av, t_env *e)
{
	int		fd;
	char	*line;
	int		i;
	int		tmp_max;

	fd = open(av, O_RDONLY);
	if (fd < 1)
		exit (0);
	i = -1;
	while (get_next_line(fd, &line) == 1)
	{
		e->y_max += 1;
		if (e->y_max == 1)
			while (line[++i])
				(line[i] != ' ' && (i - 1 == -1 || line[i - 1] == ' ')) ?
					e->x_max += 1 : 0;
		i = -1;
		tmp_max = 0;
		while (e->y_max != 1 && line[++i])
			(line[i] != ' ' && (i - 1 == -1 || line[i - 1] == ' ')) ?
				tmp_max += 1 : 0;
		free(line);
	}
	close(fd);
}

int		*wolf_split(char *line, t_env *e)
{
	int		*line_i;
	char	**tmp;
	int		x;

	line_i = ft_memalloc(sizeof(int) * e->x_max + 1);
	tmp = ft_strsplit(line, ' ');
	x = -1;
	while (++x < e->x_max)
	{
		line_i[x] = ft_atoi(tmp[x]);
		free(tmp[x]);
	}
	free(tmp);
	return (line_i);
}

int		**wolf_read(char *av, t_env *e)
{
	int		**file;
	char	*line;
	int		fd;
	int		y;
	int		i;

	fd = open(av, O_RDONLY);
	y = -1;
	i = 0;
	file = (int**)malloc(sizeof(int*) * (e->y_max + 1));
	while (get_next_line(fd, &line) > 0 && ++y < e->y_max)
	{
		file[y] = wolf_split(line, e);
		free(line);
	}
	if (get_next_line(fd, &line) == 0 && ++y < e->y_max)
		file[y] = wolf_split(line, e);
	file[y] = NULL;
	close(fd);
	return (file);
}

void	wolf_put_struct(int **file, t_env *e)
{
	int		y;
	int		x;

	y = -1;
	while (++y < e->y_max)
	{
		x = -1;
		e->map[y] = ft_memalloc(sizeof(t_vec) * (e->x_max) + 1);
		while (++x < e->x_max)
		{
			e->map[y][x].x = x;
			e->map[y][x].y = y;
			e->map[y][x].wall_type = file[y][x];
			(e->map[y][x].wall_type == 1) ? e->map[y][x].color = 0x800000 : 0;
		}
	}
}

int		main(int ac, char **av)
{
	t_env	e;
	int		**file;

	if (ac != 2)
		return (0);
	ft_bzero(&e, sizeof(t_env));
	wolf_find_max(av[1], &e);
	file = wolf_read(av[1], &e);
	e.map = (t_vec**)malloc(sizeof(t_vec*) * (e.y_max) + 1);
	ft_bzero(&e.pos, sizeof(t_pos));
	wolf_put_struct(file, &e);
	e.win_x = 65;
	e.win_y = 500;
	e.pos.pos_x = 320;
	e.pos.pos_y = 288;
	e.pos.dir_x = 1;
	e.pos.dir_y = -1;
	wolf_win(&e);
	return (0);
}
